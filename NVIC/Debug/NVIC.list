
NVIC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000878  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a3c  08000a3c  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a3c  08000a3c  00002028  2**0
                  CONTENTS
  4 .ARM          00000000  08000a3c  08000a3c  00002028  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a3c  08000a3c  00002028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a3c  08000a3c  00001a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000a40  08000a40  00001a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08000a44  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000024  20000028  08000a6c  00002028  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000a6c  0000204c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017bc  00000000  00000000  00002058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000674  00000000  00000000  00003814  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001d8  00000000  00000000  00003e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000014d  00000000  00000000  00004060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000178b  00000000  00000000  000041ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002132  00000000  00000000  00005938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000053e3  00000000  00000000  00007a6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0000ce4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000674  00000000  00000000  0000ce90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  0000d504  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000028 	.word	0x20000028
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000a24 	.word	0x08000a24

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000002c 	.word	0x2000002c
 8000200:	08000a24 	.word	0x08000a24

08000204 <GPIO_u8pininit>:
 * @retval

*/

uint8_t GPIO_u8pininit(const pin_configer_t* pin_config)
{
 8000204:	b480      	push	{r7}
 8000206:	b085      	sub	sp, #20
 8000208:	af00      	add	r7, sp, #0
 800020a:	6078      	str	r0, [r7, #4]
	uint8_t local_u8errorstate=OK;
 800020c:	2301      	movs	r3, #1
 800020e:	73fb      	strb	r3, [r7, #15]
	if(pin_config   != NULL ){
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	2b00      	cmp	r3, #0
 8000214:	f000 8130 	beq.w	8000478 <GPIO_u8pininit+0x274>
		if((pin_config -> port <=  PORTH) && (pin_config -> pinNum <=  PIN15)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	781b      	ldrb	r3, [r3, #0]
 800021c:	2b07      	cmp	r3, #7
 800021e:	f200 8128 	bhi.w	8000472 <GPIO_u8pininit+0x26e>
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	785b      	ldrb	r3, [r3, #1]
 8000226:	2b0f      	cmp	r3, #15
 8000228:	f200 8123 	bhi.w	8000472 <GPIO_u8pininit+0x26e>
				&& (pin_config -> mode <=  ANALOG)&& (pin_config -> speed <=  HIGH )
 800022c:	687b      	ldr	r3, [r7, #4]
 800022e:	789b      	ldrb	r3, [r3, #2]
 8000230:	2b03      	cmp	r3, #3
 8000232:	f200 811e 	bhi.w	8000472 <GPIO_u8pininit+0x26e>
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	78db      	ldrb	r3, [r3, #3]
 800023a:	2b03      	cmp	r3, #3
 800023c:	f200 8119 	bhi.w	8000472 <GPIO_u8pininit+0x26e>
				&& (pin_config -> outputtype <=  OPEN_DEAIN )&& (pin_config -> pulltype <=  PULLDOWN )
 8000240:	687b      	ldr	r3, [r7, #4]
 8000242:	791b      	ldrb	r3, [r3, #4]
 8000244:	2b01      	cmp	r3, #1
 8000246:	f200 8114 	bhi.w	8000472 <GPIO_u8pininit+0x26e>
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	795b      	ldrb	r3, [r3, #5]
 800024e:	2b02      	cmp	r3, #2
 8000250:	f200 810f 	bhi.w	8000472 <GPIO_u8pininit+0x26e>
				&& (pin_config -> altfunc <=  AF15 ))
 8000254:	687b      	ldr	r3, [r7, #4]
 8000256:	799b      	ldrb	r3, [r3, #6]
 8000258:	2b0f      	cmp	r3, #15
 800025a:	f200 810a 	bhi.w	8000472 <GPIO_u8pininit+0x26e>
		{
			/*select  GPIO port mode register (GPIOx_MODER) (: Input: output : Alternate function : Analog*/
			/*clear mode bits 0b11      */
			(GPIOPORT[pin_config -> port]->MODER) &=~(MODER_MASK << ((pin_config -> pinNum) * MODER_PIN_ACSESS ) );
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	461a      	mov	r2, r3
 8000264:	4b8a      	ldr	r3, [pc, #552]	@ (8000490 <GPIO_u8pininit+0x28c>)
 8000266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800026a:	681a      	ldr	r2, [r3, #0]
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	785b      	ldrb	r3, [r3, #1]
 8000270:	005b      	lsls	r3, r3, #1
 8000272:	2103      	movs	r1, #3
 8000274:	fa01 f303 	lsl.w	r3, r1, r3
 8000278:	43db      	mvns	r3, r3
 800027a:	4619      	mov	r1, r3
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	781b      	ldrb	r3, [r3, #0]
 8000280:	4618      	mov	r0, r3
 8000282:	4b83      	ldr	r3, [pc, #524]	@ (8000490 <GPIO_u8pininit+0x28c>)
 8000284:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000288:	400a      	ands	r2, r1
 800028a:	601a      	str	r2, [r3, #0]

			(GPIOPORT[pin_config -> port]->MODER) |= ((pin_config -> mode)<<(pin_config -> pinNum) * MODER_PIN_ACSESS );
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	461a      	mov	r2, r3
 8000292:	4b7f      	ldr	r3, [pc, #508]	@ (8000490 <GPIO_u8pininit+0x28c>)
 8000294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000298:	681a      	ldr	r2, [r3, #0]
 800029a:	687b      	ldr	r3, [r7, #4]
 800029c:	789b      	ldrb	r3, [r3, #2]
 800029e:	4619      	mov	r1, r3
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	785b      	ldrb	r3, [r3, #1]
 80002a4:	005b      	lsls	r3, r3, #1
 80002a6:	fa01 f303 	lsl.w	r3, r1, r3
 80002aa:	4619      	mov	r1, r3
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	781b      	ldrb	r3, [r3, #0]
 80002b0:	4618      	mov	r0, r3
 80002b2:	4b77      	ldr	r3, [pc, #476]	@ (8000490 <GPIO_u8pininit+0x28c>)
 80002b4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002b8:	430a      	orrs	r2, r1
 80002ba:	601a      	str	r2, [r3, #0]
			/*select  GPIO pull up-down---no pull set pin used  output -input -Alternate -function*/

			(GPIOPORT[pin_config -> port]->PUPDR) &=~(PUPDR_MASK << ((pin_config -> pinNum) * PUPDR_PIN_ACSESS ) );
 80002bc:	687b      	ldr	r3, [r7, #4]
 80002be:	781b      	ldrb	r3, [r3, #0]
 80002c0:	461a      	mov	r2, r3
 80002c2:	4b73      	ldr	r3, [pc, #460]	@ (8000490 <GPIO_u8pininit+0x28c>)
 80002c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002c8:	68da      	ldr	r2, [r3, #12]
 80002ca:	687b      	ldr	r3, [r7, #4]
 80002cc:	785b      	ldrb	r3, [r3, #1]
 80002ce:	005b      	lsls	r3, r3, #1
 80002d0:	2103      	movs	r1, #3
 80002d2:	fa01 f303 	lsl.w	r3, r1, r3
 80002d6:	43db      	mvns	r3, r3
 80002d8:	4619      	mov	r1, r3
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	781b      	ldrb	r3, [r3, #0]
 80002de:	4618      	mov	r0, r3
 80002e0:	4b6b      	ldr	r3, [pc, #428]	@ (8000490 <GPIO_u8pininit+0x28c>)
 80002e2:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80002e6:	400a      	ands	r2, r1
 80002e8:	60da      	str	r2, [r3, #12]

			(GPIOPORT[pin_config -> port]->PUPDR) |= ((pin_config -> pulltype)<<(pin_config -> pinNum) * PUPDR_PIN_ACSESS );
 80002ea:	687b      	ldr	r3, [r7, #4]
 80002ec:	781b      	ldrb	r3, [r3, #0]
 80002ee:	461a      	mov	r2, r3
 80002f0:	4b67      	ldr	r3, [pc, #412]	@ (8000490 <GPIO_u8pininit+0x28c>)
 80002f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80002f6:	68da      	ldr	r2, [r3, #12]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	795b      	ldrb	r3, [r3, #5]
 80002fc:	4619      	mov	r1, r3
 80002fe:	687b      	ldr	r3, [r7, #4]
 8000300:	785b      	ldrb	r3, [r3, #1]
 8000302:	005b      	lsls	r3, r3, #1
 8000304:	fa01 f303 	lsl.w	r3, r1, r3
 8000308:	4619      	mov	r1, r3
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	781b      	ldrb	r3, [r3, #0]
 800030e:	4618      	mov	r0, r3
 8000310:	4b5f      	ldr	r3, [pc, #380]	@ (8000490 <GPIO_u8pininit+0x28c>)
 8000312:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000316:	430a      	orrs	r2, r1
 8000318:	60da      	str	r2, [r3, #12]

			/*select GPIO port output speed register----> pin output or Alternate  function  */
			if((pin_config  -> mode == OUTPUT)    || (pin_config  -> mode == ALTERNATE_FUNCTION)){
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	789b      	ldrb	r3, [r3, #2]
 800031e:	2b01      	cmp	r3, #1
 8000320:	d004      	beq.n	800032c <GPIO_u8pininit+0x128>
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	789b      	ldrb	r3, [r3, #2]
 8000326:	2b02      	cmp	r3, #2
 8000328:	f040 80a9 	bne.w	800047e <GPIO_u8pininit+0x27a>
				/*select output type register  0: Output push-pull - 1: Output open-drain */
				(GPIOPORT[pin_config -> port]->OTYPER) &=~(OTYPER_MASK << (pin_config -> pinNum)  );  /*clear mode bits 0b1      */
 800032c:	687b      	ldr	r3, [r7, #4]
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	461a      	mov	r2, r3
 8000332:	4b57      	ldr	r3, [pc, #348]	@ (8000490 <GPIO_u8pininit+0x28c>)
 8000334:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000338:	685a      	ldr	r2, [r3, #4]
 800033a:	687b      	ldr	r3, [r7, #4]
 800033c:	785b      	ldrb	r3, [r3, #1]
 800033e:	4619      	mov	r1, r3
 8000340:	2301      	movs	r3, #1
 8000342:	408b      	lsls	r3, r1
 8000344:	43db      	mvns	r3, r3
 8000346:	4619      	mov	r1, r3
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	4618      	mov	r0, r3
 800034e:	4b50      	ldr	r3, [pc, #320]	@ (8000490 <GPIO_u8pininit+0x28c>)
 8000350:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000354:	400a      	ands	r2, r1
 8000356:	605a      	str	r2, [r3, #4]

				(GPIOPORT[pin_config -> port]->OTYPER) |= ((pin_config -> outputtype)<<(pin_config -> pinNum)  );
 8000358:	687b      	ldr	r3, [r7, #4]
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	461a      	mov	r2, r3
 800035e:	4b4c      	ldr	r3, [pc, #304]	@ (8000490 <GPIO_u8pininit+0x28c>)
 8000360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000364:	685a      	ldr	r2, [r3, #4]
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	791b      	ldrb	r3, [r3, #4]
 800036a:	4619      	mov	r1, r3
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	785b      	ldrb	r3, [r3, #1]
 8000370:	fa01 f303 	lsl.w	r3, r1, r3
 8000374:	4619      	mov	r1, r3
 8000376:	687b      	ldr	r3, [r7, #4]
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	4618      	mov	r0, r3
 800037c:	4b44      	ldr	r3, [pc, #272]	@ (8000490 <GPIO_u8pininit+0x28c>)
 800037e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000382:	430a      	orrs	r2, r1
 8000384:	605a      	str	r2, [r3, #4]

				/*GPIO port output speed register (GPIOx_OSPEEDR) 00:Low speed---  01:Medium speed--- 10:Fast speed--- 11:High speed*/

				(GPIOPORT[pin_config -> port]->OSPEEDER) &=~(OSPEEDER_MASK << ((pin_config -> pinNum) * OSPEEDER_PIN_ACSESS ) );
 8000386:	687b      	ldr	r3, [r7, #4]
 8000388:	781b      	ldrb	r3, [r3, #0]
 800038a:	461a      	mov	r2, r3
 800038c:	4b40      	ldr	r3, [pc, #256]	@ (8000490 <GPIO_u8pininit+0x28c>)
 800038e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000392:	689a      	ldr	r2, [r3, #8]
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	785b      	ldrb	r3, [r3, #1]
 8000398:	005b      	lsls	r3, r3, #1
 800039a:	2103      	movs	r1, #3
 800039c:	fa01 f303 	lsl.w	r3, r1, r3
 80003a0:	43db      	mvns	r3, r3
 80003a2:	4619      	mov	r1, r3
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	781b      	ldrb	r3, [r3, #0]
 80003a8:	4618      	mov	r0, r3
 80003aa:	4b39      	ldr	r3, [pc, #228]	@ (8000490 <GPIO_u8pininit+0x28c>)
 80003ac:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003b0:	400a      	ands	r2, r1
 80003b2:	609a      	str	r2, [r3, #8]

				(GPIOPORT[pin_config -> port]->OSPEEDER) |= ((pin_config -> speed)<<(pin_config -> pinNum) * OSPEEDER_PIN_ACSESS );
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	781b      	ldrb	r3, [r3, #0]
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b35      	ldr	r3, [pc, #212]	@ (8000490 <GPIO_u8pininit+0x28c>)
 80003bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80003c0:	689a      	ldr	r2, [r3, #8]
 80003c2:	687b      	ldr	r3, [r7, #4]
 80003c4:	78db      	ldrb	r3, [r3, #3]
 80003c6:	4619      	mov	r1, r3
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	785b      	ldrb	r3, [r3, #1]
 80003cc:	005b      	lsls	r3, r3, #1
 80003ce:	fa01 f303 	lsl.w	r3, r1, r3
 80003d2:	4619      	mov	r1, r3
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	781b      	ldrb	r3, [r3, #0]
 80003d8:	4618      	mov	r0, r3
 80003da:	4b2d      	ldr	r3, [pc, #180]	@ (8000490 <GPIO_u8pininit+0x28c>)
 80003dc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80003e0:	430a      	orrs	r2, r1
 80003e2:	609a      	str	r2, [r3, #8]


				if(pin_config  -> mode == ALTERNATE_FUNCTION){
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	789b      	ldrb	r3, [r3, #2]
 80003e8:	2b02      	cmp	r3, #2
 80003ea:	d148      	bne.n	800047e <GPIO_u8pininit+0x27a>
					/*select alternate function register   */
									uint8_t local_u8regnam=(pin_config -> pinNum) /AFR_PIN_SHIFTING ;  /* SELECT   AFRL ==0 OR  AFRH==1     /AFR_PIN_SHIFTING ==8*/
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	785b      	ldrb	r3, [r3, #1]
 80003f0:	08db      	lsrs	r3, r3, #3
 80003f2:	73bb      	strb	r3, [r7, #14]
									uint8_t local_u8bitnam=(pin_config -> pinNum) %AFR_PIN_SHIFTING ;  /*NUM BIT alternate function register AFRL  OR AFRH*/
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	785b      	ldrb	r3, [r3, #1]
 80003f8:	f003 0307 	and.w	r3, r3, #7
 80003fc:	737b      	strb	r3, [r7, #13]
									(GPIOPORT[pin_config -> port]->AFR[local_u8regnam]) &=~(AFR_MASK << ((local_u8bitnam) * AFR_PIN_ACSESS ) );
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	461a      	mov	r2, r3
 8000404:	4b22      	ldr	r3, [pc, #136]	@ (8000490 <GPIO_u8pininit+0x28c>)
 8000406:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800040a:	7bba      	ldrb	r2, [r7, #14]
 800040c:	3208      	adds	r2, #8
 800040e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000412:	7b7b      	ldrb	r3, [r7, #13]
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	220f      	movs	r2, #15
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	4618      	mov	r0, r3
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	461a      	mov	r2, r3
 8000426:	4b1a      	ldr	r3, [pc, #104]	@ (8000490 <GPIO_u8pininit+0x28c>)
 8000428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800042c:	7bba      	ldrb	r2, [r7, #14]
 800042e:	4001      	ands	r1, r0
 8000430:	3208      	adds	r2, #8
 8000432:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

									(GPIOPORT[pin_config -> port]->AFR[local_u8regnam]) |= ((pin_config -> altfunc)<<(local_u8bitnam) * AFR_PIN_ACSESS );
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	461a      	mov	r2, r3
 800043c:	4b14      	ldr	r3, [pc, #80]	@ (8000490 <GPIO_u8pininit+0x28c>)
 800043e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000442:	7bba      	ldrb	r2, [r7, #14]
 8000444:	3208      	adds	r2, #8
 8000446:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800044a:	687b      	ldr	r3, [r7, #4]
 800044c:	799b      	ldrb	r3, [r3, #6]
 800044e:	461a      	mov	r2, r3
 8000450:	7b7b      	ldrb	r3, [r7, #13]
 8000452:	009b      	lsls	r3, r3, #2
 8000454:	fa02 f303 	lsl.w	r3, r2, r3
 8000458:	4618      	mov	r0, r3
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	781b      	ldrb	r3, [r3, #0]
 800045e:	461a      	mov	r2, r3
 8000460:	4b0b      	ldr	r3, [pc, #44]	@ (8000490 <GPIO_u8pininit+0x28c>)
 8000462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000466:	7bba      	ldrb	r2, [r7, #14]
 8000468:	4301      	orrs	r1, r0
 800046a:	3208      	adds	r2, #8
 800046c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			if((pin_config  -> mode == OUTPUT)    || (pin_config  -> mode == ALTERNATE_FUNCTION)){
 8000470:	e005      	b.n	800047e <GPIO_u8pininit+0x27a>
				}

			}

		}else{
			local_u8errorstate=NOK;
 8000472:	2302      	movs	r3, #2
 8000474:	73fb      	strb	r3, [r7, #15]
 8000476:	e003      	b.n	8000480 <GPIO_u8pininit+0x27c>
		}


	}else{
		local_u8errorstate=NULL_PTR_ERR ;
 8000478:	2303      	movs	r3, #3
 800047a:	73fb      	strb	r3, [r7, #15]
 800047c:	e000      	b.n	8000480 <GPIO_u8pininit+0x27c>
			if((pin_config  -> mode == OUTPUT)    || (pin_config  -> mode == ALTERNATE_FUNCTION)){
 800047e:	bf00      	nop
	}

	return local_u8errorstate;
 8000480:	7bfb      	ldrb	r3, [r7, #15]

}
 8000482:	4618      	mov	r0, r3
 8000484:	3714      	adds	r7, #20
 8000486:	46bd      	mov	sp, r7
 8000488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048c:	4770      	bx	lr
 800048e:	bf00      	nop
 8000490:	20000000 	.word	0x20000000

08000494 <GPIO_u8setpinvalue>:
 * @param [in]  pinval: the output value ,get option @pinval_t enum
 * @retval local_u8errorstate

*/

uint8_t GPIO_u8setpinvalue(port_t port,pin_t pinNum,pinval_t pinval){
 8000494:	b480      	push	{r7}
 8000496:	b085      	sub	sp, #20
 8000498:	af00      	add	r7, sp, #0
 800049a:	4603      	mov	r3, r0
 800049c:	71fb      	strb	r3, [r7, #7]
 800049e:	460b      	mov	r3, r1
 80004a0:	71bb      	strb	r3, [r7, #6]
 80004a2:	4613      	mov	r3, r2
 80004a4:	717b      	strb	r3, [r7, #5]

	uint8_t local_u8errorstate=OK;
 80004a6:	2301      	movs	r3, #1
 80004a8:	73fb      	strb	r3, [r7, #15]

	if(( port <=  PORTH) && (pinNum <=  PIN15))
 80004aa:	79fb      	ldrb	r3, [r7, #7]
 80004ac:	2b07      	cmp	r3, #7
 80004ae:	d82e      	bhi.n	800050e <GPIO_u8setpinvalue+0x7a>
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	2b0f      	cmp	r3, #15
 80004b4:	d82b      	bhi.n	800050e <GPIO_u8setpinvalue+0x7a>
	{

		if(pinval == PIN_LOW){
 80004b6:	797b      	ldrb	r3, [r7, #5]
 80004b8:	2b00      	cmp	r3, #0
 80004ba:	d111      	bne.n	80004e0 <GPIO_u8setpinvalue+0x4c>
			GPIOPORT[port]->ODR &=~  (1<<pinNum);
 80004bc:	79fb      	ldrb	r3, [r7, #7]
 80004be:	4a18      	ldr	r2, [pc, #96]	@ (8000520 <GPIO_u8setpinvalue+0x8c>)
 80004c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004c4:	695a      	ldr	r2, [r3, #20]
 80004c6:	79bb      	ldrb	r3, [r7, #6]
 80004c8:	2101      	movs	r1, #1
 80004ca:	fa01 f303 	lsl.w	r3, r1, r3
 80004ce:	43db      	mvns	r3, r3
 80004d0:	4618      	mov	r0, r3
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	4912      	ldr	r1, [pc, #72]	@ (8000520 <GPIO_u8setpinvalue+0x8c>)
 80004d6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80004da:	4002      	ands	r2, r0
 80004dc:	615a      	str	r2, [r3, #20]
		if(pinval == PIN_LOW){
 80004de:	e018      	b.n	8000512 <GPIO_u8setpinvalue+0x7e>
			/* port bit set/reset register (GPIOx_BSRR)  15BIT ==1PIN ==--31 BIT==PIN15 */
			/*  GPIOPORT[port]->BSRR |= 1<<(pinNum+16) */

		}else if(pinval==PIN_HIGH){
 80004e0:	797b      	ldrb	r3, [r7, #5]
 80004e2:	2b01      	cmp	r3, #1
 80004e4:	d110      	bne.n	8000508 <GPIO_u8setpinvalue+0x74>

			GPIOPORT[port]->ODR |=   (1<<pinNum);
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	4a0d      	ldr	r2, [pc, #52]	@ (8000520 <GPIO_u8setpinvalue+0x8c>)
 80004ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ee:	695a      	ldr	r2, [r3, #20]
 80004f0:	79bb      	ldrb	r3, [r7, #6]
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f303 	lsl.w	r3, r1, r3
 80004f8:	4618      	mov	r0, r3
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	4908      	ldr	r1, [pc, #32]	@ (8000520 <GPIO_u8setpinvalue+0x8c>)
 80004fe:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000502:	4302      	orrs	r2, r0
 8000504:	615a      	str	r2, [r3, #20]
		if(pinval == PIN_LOW){
 8000506:	e004      	b.n	8000512 <GPIO_u8setpinvalue+0x7e>
			/* port bit set/reset register (GPIOx_BSRR)  0BIT ==1PIN ==--15 BIT==PIN15 */
						/*  GPIOPORT[port]->BSRR |= 1<<pinNum */

		}else{
			local_u8errorstate=NOK;
 8000508:	2302      	movs	r3, #2
 800050a:	73fb      	strb	r3, [r7, #15]
		if(pinval == PIN_LOW){
 800050c:	e001      	b.n	8000512 <GPIO_u8setpinvalue+0x7e>
		}

	}else{
		local_u8errorstate=NOK;
 800050e:	2302      	movs	r3, #2
 8000510:	73fb      	strb	r3, [r7, #15]

	}


	return local_u8errorstate;
 8000512:	7bfb      	ldrb	r3, [r7, #15]

}
 8000514:	4618      	mov	r0, r3
 8000516:	3714      	adds	r7, #20
 8000518:	46bd      	mov	sp, r7
 800051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051e:	4770      	bx	lr
 8000520:	20000000 	.word	0x20000000

08000524 <ENABLE_interrupt>:
#include "Stm32F446xx.h"
#include "errtype.h"



uint8_t ENABLE_interrupt(uint8_t IRQNUM){
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
	uint8_t local_u8errorstate=OK;
 800052e:	2301      	movs	r3, #1
 8000530:	73fb      	strb	r3, [r7, #15]

	uint8_t RegNum=IRQNUM/32;
 8000532:	79fb      	ldrb	r3, [r7, #7]
 8000534:	095b      	lsrs	r3, r3, #5
 8000536:	73bb      	strb	r3, [r7, #14]
	uint8_t BitNum=IRQNUM%32;
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	f003 031f 	and.w	r3, r3, #31
 800053e:	737b      	strb	r3, [r7, #13]

	if( IRQNUM < 96 ){
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b5f      	cmp	r3, #95	@ 0x5f
 8000544:	d808      	bhi.n	8000558 <ENABLE_interrupt+0x34>
		NVIC->ISER[RegNum]=(1<<BitNum);
 8000546:	7b7b      	ldrb	r3, [r7, #13]
 8000548:	2201      	movs	r2, #1
 800054a:	fa02 f103 	lsl.w	r1, r2, r3
 800054e:	4a07      	ldr	r2, [pc, #28]	@ (800056c <ENABLE_interrupt+0x48>)
 8000550:	7bbb      	ldrb	r3, [r7, #14]
 8000552:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8000556:	e001      	b.n	800055c <ENABLE_interrupt+0x38>
	}else{
		 local_u8errorstate= NOK;
 8000558:	2302      	movs	r3, #2
 800055a:	73fb      	strb	r3, [r7, #15]
	}

	return local_u8errorstate;
 800055c:	7bfb      	ldrb	r3, [r7, #15]

}
 800055e:	4618      	mov	r0, r3
 8000560:	3714      	adds	r7, #20
 8000562:	46bd      	mov	sp, r7
 8000564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop
 800056c:	e000e100 	.word	0xe000e100

08000570 <SET_PendingFlag>:
	return local_u8errorstate;

}


uint8_t SET_PendingFlag(uint8_t IRQNUM){
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	71fb      	strb	r3, [r7, #7]

	uint8_t local_u8errorstate=OK;
 800057a:	2301      	movs	r3, #1
 800057c:	73fb      	strb	r3, [r7, #15]

		uint8_t RegNum=IRQNUM/32;
 800057e:	79fb      	ldrb	r3, [r7, #7]
 8000580:	095b      	lsrs	r3, r3, #5
 8000582:	73bb      	strb	r3, [r7, #14]
		uint8_t BitNum=IRQNUM%32;
 8000584:	79fb      	ldrb	r3, [r7, #7]
 8000586:	f003 031f 	and.w	r3, r3, #31
 800058a:	737b      	strb	r3, [r7, #13]

		if(IRQNUM < 96){
 800058c:	79fb      	ldrb	r3, [r7, #7]
 800058e:	2b5f      	cmp	r3, #95	@ 0x5f
 8000590:	d809      	bhi.n	80005a6 <SET_PendingFlag+0x36>
			NVIC->ISPR[RegNum]=(1<<BitNum);
 8000592:	7b7b      	ldrb	r3, [r7, #13]
 8000594:	2201      	movs	r2, #1
 8000596:	fa02 f103 	lsl.w	r1, r2, r3
 800059a:	4a07      	ldr	r2, [pc, #28]	@ (80005b8 <SET_PendingFlag+0x48>)
 800059c:	7bbb      	ldrb	r3, [r7, #14]
 800059e:	3340      	adds	r3, #64	@ 0x40
 80005a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 80005a4:	e001      	b.n	80005aa <SET_PendingFlag+0x3a>
		}else{
			 local_u8errorstate= NOK;
 80005a6:	2302      	movs	r3, #2
 80005a8:	73fb      	strb	r3, [r7, #15]
		}

		return local_u8errorstate;
 80005aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80005ac:	4618      	mov	r0, r3
 80005ae:	3714      	adds	r7, #20
 80005b0:	46bd      	mov	sp, r7
 80005b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b6:	4770      	bx	lr
 80005b8:	e000e100 	.word	0xe000e100

080005bc <RCC_SETCLK>:
uint32_t SystemCoreClock = 16000000; // Or your system core clock value.


/*****************RCC SET CLocK*************selected enable as system clock  OR TIMEOUT*****************************/
uint8_t RCC_SETCLK(uint8_t CLKtype, uint8_t CLKstatus)
{
 80005bc:	b480      	push	{r7}
 80005be:	b085      	sub	sp, #20
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	4603      	mov	r3, r0
 80005c4:	460a      	mov	r2, r1
 80005c6:	71fb      	strb	r3, [r7, #7]
 80005c8:	4613      	mov	r3, r2
 80005ca:	71bb      	strb	r3, [r7, #6]
    uint8_t RCC_ERRORSTATUS = RCC_ERRORSTATUS_OK; // Default error status==0
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
    uint32_t TIME = TIMEOUT;                     // Timeout counter
 80005d0:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 80005d4:	60bb      	str	r3, [r7, #8]
    switch (CLKtype)
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	2b02      	cmp	r3, #2
 80005da:	d042      	beq.n	8000662 <RCC_SETCLK+0xa6>
 80005dc:	2b02      	cmp	r3, #2
 80005de:	dc5e      	bgt.n	800069e <RCC_SETCLK+0xe2>
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d002      	beq.n	80005ea <RCC_SETCLK+0x2e>
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d01e      	beq.n	8000626 <RCC_SETCLK+0x6a>
 80005e8:	e059      	b.n	800069e <RCC_SETCLK+0xe2>
    {
		case HSI:
		{
			if (CLKstatus == RCC_ON)
 80005ea:	79bb      	ldrb	r3, [r7, #6]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d113      	bne.n	8000618 <RCC_SETCLK+0x5c>
			{
				//SET_BIT ((RCC->CR), HSION);
				RCC->CR |= (1 << HSION); // Enable HSI
 80005f0:	4b35      	ldr	r3, [pc, #212]	@ (80006c8 <RCC_SETCLK+0x10c>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a34      	ldr	r2, [pc, #208]	@ (80006c8 <RCC_SETCLK+0x10c>)
 80005f6:	f043 0301 	orr.w	r3, r3, #1
 80005fa:	6013      	str	r3, [r2, #0]
				while (((RCC->CR & (1 << HSIRDY)) == RCC_OFF) && (--TIME)); // Wait for HSI to stabilize
 80005fc:	bf00      	nop
 80005fe:	4b32      	ldr	r3, [pc, #200]	@ (80006c8 <RCC_SETCLK+0x10c>)
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	2b00      	cmp	r3, #0
 8000608:	d14c      	bne.n	80006a4 <RCC_SETCLK+0xe8>
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	3b01      	subs	r3, #1
 800060e:	60bb      	str	r3, [r7, #8]
 8000610:	68bb      	ldr	r3, [r7, #8]
 8000612:	2b00      	cmp	r3, #0
 8000614:	d1f3      	bne.n	80005fe <RCC_SETCLK+0x42>
			{
				RCC->CR &= ~(1 << HSION); // Disable HSI
	        	//CLR_BIT ((RCC->CR), HSION);

			}
			break;
 8000616:	e045      	b.n	80006a4 <RCC_SETCLK+0xe8>
				RCC->CR &= ~(1 << HSION); // Disable HSI
 8000618:	4b2b      	ldr	r3, [pc, #172]	@ (80006c8 <RCC_SETCLK+0x10c>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a2a      	ldr	r2, [pc, #168]	@ (80006c8 <RCC_SETCLK+0x10c>)
 800061e:	f023 0301 	bic.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]
			break;
 8000624:	e03e      	b.n	80006a4 <RCC_SETCLK+0xe8>
		}
		case HSE:
		{
			if (CLKstatus == RCC_ON)
 8000626:	79bb      	ldrb	r3, [r7, #6]
 8000628:	2b01      	cmp	r3, #1
 800062a:	d113      	bne.n	8000654 <RCC_SETCLK+0x98>
			{
				RCC->CR |= (1 << HSEON); // Enable HSE
 800062c:	4b26      	ldr	r3, [pc, #152]	@ (80006c8 <RCC_SETCLK+0x10c>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a25      	ldr	r2, [pc, #148]	@ (80006c8 <RCC_SETCLK+0x10c>)
 8000632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000636:	6013      	str	r3, [r2, #0]
				while (((RCC->CR & (1 << HSERDY)) == RCC_OFF) && (--TIME)); // Wait for HSI to stabilize
 8000638:	bf00      	nop
 800063a:	4b23      	ldr	r3, [pc, #140]	@ (80006c8 <RCC_SETCLK+0x10c>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000642:	2b00      	cmp	r3, #0
 8000644:	d130      	bne.n	80006a8 <RCC_SETCLK+0xec>
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	3b01      	subs	r3, #1
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1f3      	bne.n	800063a <RCC_SETCLK+0x7e>
			}
			else
			{
				RCC->CR &= ~(1 << HSEON); // Disable HSE
			}
			break;
 8000652:	e029      	b.n	80006a8 <RCC_SETCLK+0xec>
				RCC->CR &= ~(1 << HSEON); // Disable HSE
 8000654:	4b1c      	ldr	r3, [pc, #112]	@ (80006c8 <RCC_SETCLK+0x10c>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a1b      	ldr	r2, [pc, #108]	@ (80006c8 <RCC_SETCLK+0x10c>)
 800065a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800065e:	6013      	str	r3, [r2, #0]
			break;
 8000660:	e022      	b.n	80006a8 <RCC_SETCLK+0xec>
		}
		case PLL:
		{
			if (CLKstatus == RCC_ON)
 8000662:	79bb      	ldrb	r3, [r7, #6]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d113      	bne.n	8000690 <RCC_SETCLK+0xd4>
			{

				RCC->CR |= (1 << PLLON); // Enable PLL
 8000668:	4b17      	ldr	r3, [pc, #92]	@ (80006c8 <RCC_SETCLK+0x10c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	4a16      	ldr	r2, [pc, #88]	@ (80006c8 <RCC_SETCLK+0x10c>)
 800066e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000672:	6013      	str	r3, [r2, #0]
				while (((RCC->CR & (1 << PLLRDY)) == RCC_OFF) && (--TIME)); // Wait for HSI to stabilize
 8000674:	bf00      	nop
 8000676:	4b14      	ldr	r3, [pc, #80]	@ (80006c8 <RCC_SETCLK+0x10c>)
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800067e:	2b00      	cmp	r3, #0
 8000680:	d114      	bne.n	80006ac <RCC_SETCLK+0xf0>
 8000682:	68bb      	ldr	r3, [r7, #8]
 8000684:	3b01      	subs	r3, #1
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	68bb      	ldr	r3, [r7, #8]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d1f3      	bne.n	8000676 <RCC_SETCLK+0xba>
			}
			else
			{
				RCC->CR &= ~(1 << PLLON); // Disable PLL
			}
			break;
 800068e:	e00d      	b.n	80006ac <RCC_SETCLK+0xf0>
				RCC->CR &= ~(1 << PLLON); // Disable PLL
 8000690:	4b0d      	ldr	r3, [pc, #52]	@ (80006c8 <RCC_SETCLK+0x10c>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	4a0c      	ldr	r2, [pc, #48]	@ (80006c8 <RCC_SETCLK+0x10c>)
 8000696:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800069a:	6013      	str	r3, [r2, #0]
			break;
 800069c:	e006      	b.n	80006ac <RCC_SETCLK+0xf0>
		}
		default:
			RCC_ERRORSTATUS = RCC_ERRORSTATUS_NOT_OK; // Invalid clock type
 800069e:	2301      	movs	r3, #1
 80006a0:	73fb      	strb	r3, [r7, #15]
 80006a2:	e004      	b.n	80006ae <RCC_SETCLK+0xf2>
			break;
 80006a4:	bf00      	nop
 80006a6:	e002      	b.n	80006ae <RCC_SETCLK+0xf2>
			break;
 80006a8:	bf00      	nop
 80006aa:	e000      	b.n	80006ae <RCC_SETCLK+0xf2>
			break;
 80006ac:	bf00      	nop
    }
    // Check if timeout occurred
    if (TIME == 0)
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d101      	bne.n	80006b8 <RCC_SETCLK+0xfc>
    {
        RCC_ERRORSTATUS = RCC_ERRORSTATUS_TIME_OUT;
 80006b4:	2302      	movs	r3, #2
 80006b6:	73fb      	strb	r3, [r7, #15]
    }

    return RCC_ERRORSTATUS;
 80006b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80006ba:	4618      	mov	r0, r3
 80006bc:	3714      	adds	r7, #20
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800

080006cc <RCC_SETSYSCLK>:


/******************selected  System clock switch**************OR*********************/
volatile uint32_t timeout = 0xFFFF;

void RCC_SETSYSCLK(uint8_t SYSCLK) {
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	71fb      	strb	r3, [r7, #7]
        // Clear the SW[1:0] bits first

    RCC->CFGR &= ~(RCC_CFGR_SW_Msk);
 80006d6:	4b12      	ldr	r3, [pc, #72]	@ (8000720 <RCC_SETSYSCLK+0x54>)
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	4a11      	ldr	r2, [pc, #68]	@ (8000720 <RCC_SETSYSCLK+0x54>)
 80006dc:	f023 0303 	bic.w	r3, r3, #3
 80006e0:	6093      	str	r3, [r2, #8]

    // Set the new clock source
    RCC->CFGR |= (SYSCLK << SW_Pos);
 80006e2:	4b0f      	ldr	r3, [pc, #60]	@ (8000720 <RCC_SETSYSCLK+0x54>)
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	490d      	ldr	r1, [pc, #52]	@ (8000720 <RCC_SETSYSCLK+0x54>)
 80006ea:	4313      	orrs	r3, r2
 80006ec:	608b      	str	r3, [r1, #8]

    // Wait until the new system clock source is used
        while (((RCC->CFGR & RCC_CFGR_SWS_Msk) >>RCC_CFGR_SWS_Pos ) != SYSCLK){
 80006ee:	e006      	b.n	80006fe <RCC_SETSYSCLK+0x32>
            if (--timeout == 0) break;
 80006f0:	4b0c      	ldr	r3, [pc, #48]	@ (8000724 <RCC_SETSYSCLK+0x58>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	3b01      	subs	r3, #1
 80006f6:	4a0b      	ldr	r2, [pc, #44]	@ (8000724 <RCC_SETSYSCLK+0x58>)
 80006f8:	6013      	str	r3, [r2, #0]
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d008      	beq.n	8000710 <RCC_SETSYSCLK+0x44>
        while (((RCC->CFGR & RCC_CFGR_SWS_Msk) >>RCC_CFGR_SWS_Pos ) != SYSCLK){
 80006fe:	4b08      	ldr	r3, [pc, #32]	@ (8000720 <RCC_SETSYSCLK+0x54>)
 8000700:	689b      	ldr	r3, [r3, #8]
 8000702:	089b      	lsrs	r3, r3, #2
 8000704:	f003 0203 	and.w	r2, r3, #3
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	429a      	cmp	r2, r3
 800070c:	d1f0      	bne.n	80006f0 <RCC_SETSYSCLK+0x24>
        }
    }
 800070e:	e000      	b.n	8000712 <RCC_SETSYSCLK+0x46>
            if (--timeout == 0) break;
 8000710:	bf00      	nop
    }
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	20000024 	.word	0x20000024

08000728 <SystemCoreClockUpdate>:
/*dynamically calculates SystemCoreClock based on the current RCC register configuration.
 *  This is updated by the SystemCoreClockUpdate() function.
 *  ************************/

//
void SystemCoreClockUpdate(void) {
 8000728:	b480      	push	{r7}
 800072a:	b087      	sub	sp, #28
 800072c:	af00      	add	r7, sp, #0
    uint32_t tmp, pllm, pllvco, pllp;
    uint32_t sysclk_source;
/*This binary mask (0b1100) is used to isolate the SWS bits
 * when reading the RCC_CFGR registe*/
    sysclk_source = RCC->CFGR & RCC_CFGR_SWS_Msk ;
 800072e:	4b26      	ldr	r3, [pc, #152]	@ (80007c8 <SystemCoreClockUpdate+0xa0>)
 8000730:	689b      	ldr	r3, [r3, #8]
 8000732:	f003 030c 	and.w	r3, r3, #12
 8000736:	617b      	str	r3, [r7, #20]

    if (sysclk_source == RCC_CFGR_SWS_HSI) { // HSI used as system clock
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	2b00      	cmp	r3, #0
 800073c:	d103      	bne.n	8000746 <SystemCoreClockUpdate+0x1e>
        SystemCoreClock = 16000000;
 800073e:	4b23      	ldr	r3, [pc, #140]	@ (80007cc <SystemCoreClockUpdate+0xa4>)
 8000740:	4a23      	ldr	r2, [pc, #140]	@ (80007d0 <SystemCoreClockUpdate+0xa8>)
 8000742:	601a      	str	r2, [r3, #0]
 8000744:	e028      	b.n	8000798 <SystemCoreClockUpdate+0x70>

    } else if (sysclk_source == RCC_CFGR_SWS_HSE) { // HSE used as system clock
 8000746:	697b      	ldr	r3, [r7, #20]
 8000748:	2b04      	cmp	r3, #4
 800074a:	d103      	bne.n	8000754 <SystemCoreClockUpdate+0x2c>

    	SystemCoreClock = HSE_VALUE;
 800074c:	4b1f      	ldr	r3, [pc, #124]	@ (80007cc <SystemCoreClockUpdate+0xa4>)
 800074e:	4a21      	ldr	r2, [pc, #132]	@ (80007d4 <SystemCoreClockUpdate+0xac>)
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	e021      	b.n	8000798 <SystemCoreClockUpdate+0x70>


    } else if (sysclk_source == RCC_CFGR_SWS_PLL) { // PLL used as system clock
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	2b08      	cmp	r3, #8
 8000758:	d11e      	bne.n	8000798 <SystemCoreClockUpdate+0x70>


    	/*OR  pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk)      >>  RCC_PLLCFGR_PLLM_Pos   );*/
    	pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM_Msk;
 800075a:	4b1b      	ldr	r3, [pc, #108]	@ (80007c8 <SystemCoreClockUpdate+0xa0>)
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000762:	613b      	str	r3, [r7, #16]

        /*Getting the Actual PLLN Value: To get the value as an integer,
         *  you need to shift it to the right:
         * */
        pllvco = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN_Msk) >> RCC_PLLCFGR_PLLN_Pos) * (HSE_VALUE / pllm);
 8000764:	4b18      	ldr	r3, [pc, #96]	@ (80007c8 <SystemCoreClockUpdate+0xa0>)
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	099b      	lsrs	r3, r3, #6
 800076a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800076e:	4919      	ldr	r1, [pc, #100]	@ (80007d4 <SystemCoreClockUpdate+0xac>)
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	fbb1 f2f2 	udiv	r2, r1, r2
 8000776:	fb02 f303 	mul.w	r3, r2, r3
 800077a:	60fb      	str	r3, [r7, #12]

        /*If the bits are 01 (encoded as 1), the calculation becomes (1 + 1) * 2 = 4   Result: pllp = 4.*/
        pllp = (((RCC->PLLCFGR & PLLCFGR_PLLP) >> PLLP_Pos) + 1) * 2;
 800077c:	4b12      	ldr	r3, [pc, #72]	@ (80007c8 <SystemCoreClockUpdate+0xa0>)
 800077e:	685b      	ldr	r3, [r3, #4]
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	f003 0303 	and.w	r3, r3, #3
 8000786:	3301      	adds	r3, #1
 8000788:	005b      	lsls	r3, r3, #1
 800078a:	60bb      	str	r3, [r7, #8]

        SystemCoreClock = pllvco / pllp;
 800078c:	68fa      	ldr	r2, [r7, #12]
 800078e:	68bb      	ldr	r3, [r7, #8]
 8000790:	fbb2 f3f3 	udiv	r3, r2, r3
 8000794:	4a0d      	ldr	r2, [pc, #52]	@ (80007cc <SystemCoreClockUpdate+0xa4>)
 8000796:	6013      	str	r3, [r2, #0]




    /*Bits 7:4 HPRE: AHB prescaler  ************************************/
    tmp = ((RCC->CFGR & RCC_CFGR_AHB_MSK) >> RCC_CFGR_AHB_Pos);
 8000798:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <SystemCoreClockUpdate+0xa0>)
 800079a:	689b      	ldr	r3, [r3, #8]
 800079c:	091b      	lsrs	r3, r3, #4
 800079e:	f003 030f 	and.w	r3, r3, #15
 80007a2:	607b      	str	r3, [r7, #4]
/*If tmp is 8 or greater, the AHB clock is divided.
The division factor is determined by (tmp - 0x07). */
    if (    tmp >= 0x08    ) {
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	2b07      	cmp	r3, #7
 80007a8:	d907      	bls.n	80007ba <SystemCoreClockUpdate+0x92>

        SystemCoreClock >>= (tmp - 0x07);
 80007aa:	4b08      	ldr	r3, [pc, #32]	@ (80007cc <SystemCoreClockUpdate+0xa4>)
 80007ac:	681a      	ldr	r2, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	3b07      	subs	r3, #7
 80007b2:	fa22 f303 	lsr.w	r3, r2, r3
 80007b6:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <SystemCoreClockUpdate+0xa4>)
 80007b8:	6013      	str	r3, [r2, #0]
    }
}
 80007ba:	bf00      	nop
 80007bc:	371c      	adds	r7, #28
 80007be:	46bd      	mov	sp, r7
 80007c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c4:	4770      	bx	lr
 80007c6:	bf00      	nop
 80007c8:	40023800 	.word	0x40023800
 80007cc:	20000020 	.word	0x20000020
 80007d0:	00f42400 	.word	0x00f42400
 80007d4:	007a1200 	.word	0x007a1200

080007d8 <RCC_AHB1_enable>:

/************************************************************************/
/****************** AHB1 peripheral clock enable&disabled*********************************/


void RCC_AHB1_enable(uint32_t peripheral){
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
	RCC->AHB1ENR |=(1 << peripheral);
 80007e0:	4b07      	ldr	r3, [pc, #28]	@ (8000800 <RCC_AHB1_enable+0x28>)
 80007e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e4:	2101      	movs	r1, #1
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ec:	4611      	mov	r1, r2
 80007ee:	4a04      	ldr	r2, [pc, #16]	@ (8000800 <RCC_AHB1_enable+0x28>)
 80007f0:	430b      	orrs	r3, r1
 80007f2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80007f4:	bf00      	nop
 80007f6:	370c      	adds	r7, #12
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40023800 	.word	0x40023800

08000804 <SysTick_Init>:


volatile uint32_t tick_count = 0;


void SysTick_Init(ProcessorDIV Processor) {
 8000804:	b480      	push	{r7}
 8000806:	b083      	sub	sp, #12
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	71fb      	strb	r3, [r7, #7]
    // Set reload value for 1ms==1000sec tick     // Configure SysTick for 1 ms interrupts

	SysTick->LOAD = SystemCoreClock / 1000 - 1; /*SystemCoreClock=80MHZ*/
 800080e:	4b17      	ldr	r3, [pc, #92]	@ (800086c <SysTick_Init+0x68>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	4a17      	ldr	r2, [pc, #92]	@ (8000870 <SysTick_Init+0x6c>)
 8000814:	fba2 2303 	umull	r2, r3, r2, r3
 8000818:	099b      	lsrs	r3, r3, #6
 800081a:	4a16      	ldr	r2, [pc, #88]	@ (8000874 <SysTick_Init+0x70>)
 800081c:	3b01      	subs	r3, #1
 800081e:	6053      	str	r3, [r2, #4]

    SysTick->VAL = 0;  // Reset the current value
 8000820:	4b14      	ldr	r3, [pc, #80]	@ (8000874 <SysTick_Init+0x70>)
 8000822:	2200      	movs	r2, #0
 8000824:	609a      	str	r2, [r3, #8]

    // Configure the SysTick timer

    if(Processor == 1 ){
 8000826:	79fb      	ldrb	r3, [r7, #7]
 8000828:	2b01      	cmp	r3, #1
 800082a:	d106      	bne.n	800083a <SysTick_Init+0x36>
    	/*Selecting the Processor Clock (HCLK)*/
    SysTick ->CTRL |=(   1 << CLKSOURCE );  /*Use processor clock*/
 800082c:	4b11      	ldr	r3, [pc, #68]	@ (8000874 <SysTick_Init+0x70>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a10      	ldr	r2, [pc, #64]	@ (8000874 <SysTick_Init+0x70>)
 8000832:	f043 0304 	orr.w	r3, r3, #4
 8000836:	6013      	str	r3, [r2, #0]
 8000838:	e005      	b.n	8000846 <SysTick_Init+0x42>
    }else{
    	/*Selecting the External Clock (HCLK/8):
    	To clear the CLKSOURCE bit*/
    	SysTick ->CTRL &=~(   1 << CLKSOURCE );
 800083a:	4b0e      	ldr	r3, [pc, #56]	@ (8000874 <SysTick_Init+0x70>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	4a0d      	ldr	r2, [pc, #52]	@ (8000874 <SysTick_Init+0x70>)
 8000840:	f023 0304 	bic.w	r3, r3, #4
 8000844:	6013      	str	r3, [r2, #0]
    }

    SysTick ->CTRL |=(   1 << TICKINT ); /*Enable interrupt*/
 8000846:	4b0b      	ldr	r3, [pc, #44]	@ (8000874 <SysTick_Init+0x70>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	4a0a      	ldr	r2, [pc, #40]	@ (8000874 <SysTick_Init+0x70>)
 800084c:	f043 0302 	orr.w	r3, r3, #2
 8000850:	6013      	str	r3, [r2, #0]
	SysTick ->CTRL |=(   1 << ENABLE );  /*Enable SysTick*/
 8000852:	4b08      	ldr	r3, [pc, #32]	@ (8000874 <SysTick_Init+0x70>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <SysTick_Init+0x70>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6013      	str	r3, [r2, #0]
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	20000020 	.word	0x20000020
 8000870:	10624dd3 	.word	0x10624dd3
 8000874:	e000e010 	.word	0xe000e010

08000878 <SysTick_Handler>:


/**
 * @brief SysTick interrupt handler.
 */
void SysTick_Handler(void) {
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
    tick_count++;
 800087c:	4b04      	ldr	r3, [pc, #16]	@ (8000890 <SysTick_Handler+0x18>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	3301      	adds	r3, #1
 8000882:	4a03      	ldr	r2, [pc, #12]	@ (8000890 <SysTick_Handler+0x18>)
 8000884:	6013      	str	r3, [r2, #0]
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	20000044 	.word	0x20000044

08000894 <Delay_ms>:

/**
 * @brief Delay function based on SysTick.
 * @param ms: Number of milliseconds to delay.
 */
void Delay_ms(uint32_t ms) {
 8000894:	b480      	push	{r7}
 8000896:	b085      	sub	sp, #20
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    uint32_t start = tick_count;
 800089c:	4b08      	ldr	r3, [pc, #32]	@ (80008c0 <Delay_ms+0x2c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	60fb      	str	r3, [r7, #12]
    while ((tick_count - start) < ms) {
 80008a2:	bf00      	nop
 80008a4:	4b06      	ldr	r3, [pc, #24]	@ (80008c0 <Delay_ms+0x2c>)
 80008a6:	681a      	ldr	r2, [r3, #0]
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	1ad3      	subs	r3, r2, r3
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	429a      	cmp	r2, r3
 80008b0:	d8f8      	bhi.n	80008a4 <Delay_ms+0x10>
        // Wait
    }
}
 80008b2:	bf00      	nop
 80008b4:	bf00      	nop
 80008b6:	3714      	adds	r7, #20
 80008b8:	46bd      	mov	sp, r7
 80008ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008be:	4770      	bx	lr
 80008c0:	20000044 	.word	0x20000044

080008c4 <main>:

volatile uint8_t usart3_interrupt_flag = 0;


int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0

    RCC_SETCLK(HSI,RCC_ON);
 80008ca:	2101      	movs	r1, #1
 80008cc:	2000      	movs	r0, #0
 80008ce:	f7ff fe75 	bl	80005bc <RCC_SETCLK>
    RCC_SETSYSCLK(SW_HSI);  //  Switch system clock to PLL
 80008d2:	2000      	movs	r0, #0
 80008d4:	f7ff fefa 	bl	80006cc <RCC_SETSYSCLK>
    SystemCoreClockUpdate();   // Update core clock variable
 80008d8:	f7ff ff26 	bl	8000728 <SystemCoreClockUpdate>
 	SysTick_Init(ProcessorAHB); // Initialize SysTick with new frequency
 80008dc:	2001      	movs	r0, #1
 80008de:	f7ff ff91 	bl	8000804 <SysTick_Init>


 	SysTick_Init(ProcessorAHB); // Initialize SysTick with new frequency
 80008e2:	2001      	movs	r0, #1
 80008e4:	f7ff ff8e 	bl	8000804 <SysTick_Init>

 	 	    RCC_AHB1_enable(GPIOAEN);   // Enable GPIOA
 80008e8:	2000      	movs	r0, #0
 80008ea:	f7ff ff75 	bl	80007d8 <RCC_AHB1_enable>
 	 	   RCC_AHB1_enable(GPIOCEN);   // Enable GPIOC clock
 80008ee:	2002      	movs	r0, #2
 80008f0:	f7ff ff72 	bl	80007d8 <RCC_AHB1_enable>
pin_configer_t PINA5_LED={
 80008f4:	463b      	mov	r3, r7
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	f8c3 2003 	str.w	r2, [r3, #3]
 80008fe:	2305      	movs	r3, #5
 8000900:	707b      	strb	r3, [r7, #1]
 8000902:	2301      	movs	r3, #1
 8000904:	70bb      	strb	r3, [r7, #2]
		.speed=LOW,
		.outputtype=PUSH_PULL,
		.pulltype=NOPULL
};

GPIO_u8pininit(&PINA5_LED);
 8000906:	463b      	mov	r3, r7
 8000908:	4618      	mov	r0, r3
 800090a:	f7ff fc7b 	bl	8000204 <GPIO_u8pininit>

ENABLE_interrupt(USART3);
 800090e:	2027      	movs	r0, #39	@ 0x27
 8000910:	f7ff fe08 	bl	8000524 <ENABLE_interrupt>
SET_PendingFlag(USART3);
 8000914:	2027      	movs	r0, #39	@ 0x27
 8000916:	f7ff fe2b 	bl	8000570 <SET_PendingFlag>


while(1)
{

    usart3_interrupt_flag = 0;    // flag
 800091a:	4b14      	ldr	r3, [pc, #80]	@ (800096c <main+0xa8>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]

            GPIO_u8setpinvalue(PORTA, PIN5, PIN_HIGH); // on led
 8000920:	2201      	movs	r2, #1
 8000922:	2105      	movs	r1, #5
 8000924:	2000      	movs	r0, #0
 8000926:	f7ff fdb5 	bl	8000494 <GPIO_u8setpinvalue>
            Delay_ms(500);
 800092a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800092e:	f7ff ffb1 	bl	8000894 <Delay_ms>

            GPIO_u8setpinvalue(PORTA, PIN5, PIN_LOW); // off led
 8000932:	2200      	movs	r2, #0
 8000934:	2105      	movs	r1, #5
 8000936:	2000      	movs	r0, #0
 8000938:	f7ff fdac 	bl	8000494 <GPIO_u8setpinvalue>
            Delay_ms(500);
 800093c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000940:	f7ff ffa8 	bl	8000894 <Delay_ms>

            GPIO_u8setpinvalue(PORTA, PIN5, PIN_HIGH); // on led
 8000944:	2201      	movs	r2, #1
 8000946:	2105      	movs	r1, #5
 8000948:	2000      	movs	r0, #0
 800094a:	f7ff fda3 	bl	8000494 <GPIO_u8setpinvalue>
                      Delay_ms(500);
 800094e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000952:	f7ff ff9f 	bl	8000894 <Delay_ms>

                      GPIO_u8setpinvalue(PORTA, PIN5, PIN_LOW); // off led
 8000956:	2200      	movs	r2, #0
 8000958:	2105      	movs	r1, #5
 800095a:	2000      	movs	r0, #0
 800095c:	f7ff fd9a 	bl	8000494 <GPIO_u8setpinvalue>
                      Delay_ms(500);
 8000960:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000964:	f7ff ff96 	bl	8000894 <Delay_ms>
    usart3_interrupt_flag = 0;    // flag
 8000968:	bf00      	nop
 800096a:	e7d6      	b.n	800091a <main+0x56>
 800096c:	20000048 	.word	0x20000048

08000970 <USART3_IRQHandler>:

}
}

void USART3_IRQHandler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
    usart3_interrupt_flag = 1;            //flag
 8000974:	4b03      	ldr	r3, [pc, #12]	@ (8000984 <USART3_IRQHandler+0x14>)
 8000976:	2201      	movs	r2, #1
 8000978:	701a      	strb	r2, [r3, #0]
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	20000048 	.word	0x20000048

08000988 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000988:	480d      	ldr	r0, [pc, #52]	@ (80009c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800098a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800098c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000990:	480c      	ldr	r0, [pc, #48]	@ (80009c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000992:	490d      	ldr	r1, [pc, #52]	@ (80009c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000994:	4a0d      	ldr	r2, [pc, #52]	@ (80009cc <LoopForever+0xe>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000998:	e002      	b.n	80009a0 <LoopCopyDataInit>

0800099a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800099a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800099c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099e:	3304      	adds	r3, #4

080009a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a4:	d3f9      	bcc.n	800099a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a6:	4a0a      	ldr	r2, [pc, #40]	@ (80009d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a8:	4c0a      	ldr	r4, [pc, #40]	@ (80009d4 <LoopForever+0x16>)
  movs r3, #0
 80009aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009ac:	e001      	b.n	80009b2 <LoopFillZerobss>

080009ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009b0:	3204      	adds	r2, #4

080009b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b4:	d3fb      	bcc.n	80009ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80009b6:	f000 f811 	bl	80009dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80009ba:	f7ff ff83 	bl	80008c4 <main>

080009be <LoopForever>:

LoopForever:
  b LoopForever
 80009be:	e7fe      	b.n	80009be <LoopForever>
  ldr   r0, =_estack
 80009c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c8:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 80009cc:	08000a44 	.word	0x08000a44
  ldr r2, =_sbss
 80009d0:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 80009d4:	2000004c 	.word	0x2000004c

080009d8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80009d8:	e7fe      	b.n	80009d8 <ADC_IRQHandler>
	...

080009dc <__libc_init_array>:
 80009dc:	b570      	push	{r4, r5, r6, lr}
 80009de:	4d0d      	ldr	r5, [pc, #52]	@ (8000a14 <__libc_init_array+0x38>)
 80009e0:	4c0d      	ldr	r4, [pc, #52]	@ (8000a18 <__libc_init_array+0x3c>)
 80009e2:	1b64      	subs	r4, r4, r5
 80009e4:	10a4      	asrs	r4, r4, #2
 80009e6:	2600      	movs	r6, #0
 80009e8:	42a6      	cmp	r6, r4
 80009ea:	d109      	bne.n	8000a00 <__libc_init_array+0x24>
 80009ec:	4d0b      	ldr	r5, [pc, #44]	@ (8000a1c <__libc_init_array+0x40>)
 80009ee:	4c0c      	ldr	r4, [pc, #48]	@ (8000a20 <__libc_init_array+0x44>)
 80009f0:	f000 f818 	bl	8000a24 <_init>
 80009f4:	1b64      	subs	r4, r4, r5
 80009f6:	10a4      	asrs	r4, r4, #2
 80009f8:	2600      	movs	r6, #0
 80009fa:	42a6      	cmp	r6, r4
 80009fc:	d105      	bne.n	8000a0a <__libc_init_array+0x2e>
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a04:	4798      	blx	r3
 8000a06:	3601      	adds	r6, #1
 8000a08:	e7ee      	b.n	80009e8 <__libc_init_array+0xc>
 8000a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0e:	4798      	blx	r3
 8000a10:	3601      	adds	r6, #1
 8000a12:	e7f2      	b.n	80009fa <__libc_init_array+0x1e>
 8000a14:	08000a3c 	.word	0x08000a3c
 8000a18:	08000a3c 	.word	0x08000a3c
 8000a1c:	08000a3c 	.word	0x08000a3c
 8000a20:	08000a40 	.word	0x08000a40

08000a24 <_init>:
 8000a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a26:	bf00      	nop
 8000a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a2a:	bc08      	pop	{r3}
 8000a2c:	469e      	mov	lr, r3
 8000a2e:	4770      	bx	lr

08000a30 <_fini>:
 8000a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a32:	bf00      	nop
 8000a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a36:	bc08      	pop	{r3}
 8000a38:	469e      	mov	lr, r3
 8000a3a:	4770      	bx	lr
